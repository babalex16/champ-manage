// <auto-generated />
using System;
using ChampManage.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ChampManage.API.Migrations
{
    [DbContext(typeof(ChampManageContext))]
    partial class ChampManageContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("ChampionshipUser", b =>
                {
                    b.Property<int>("ParticipantsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("RegisteredChampionshipsId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ParticipantsId", "RegisteredChampionshipsId");

                    b.HasIndex("RegisteredChampionshipsId");

                    b.ToTable("ChampionshipUser", (string)null);
                });

            modelBuilder.Entity("ChampManage.API.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Belt")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ChampionshipId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("FightTimeMinutes")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxAge")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MaxWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("MinAge")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ChampionshipId");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Belt = 0,
                            FightTimeMinutes = 2,
                            MaxAge = 5,
                            MaxWeight = 21,
                            MinAge = 4,
                            Name = "Pee Wee 1"
                        },
                        new
                        {
                            Id = 2,
                            Belt = 0,
                            FightTimeMinutes = 2,
                            MaxAge = 5,
                            MaxWeight = 200,
                            MinAge = 4,
                            Name = "Pee Wee 1"
                        },
                        new
                        {
                            Id = 3,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 7,
                            MaxWeight = 21,
                            MinAge = 6,
                            Name = "Pee Wee 2"
                        },
                        new
                        {
                            Id = 4,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 7,
                            MaxWeight = 24,
                            MinAge = 6,
                            Name = "Pee Wee 2"
                        },
                        new
                        {
                            Id = 5,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 7,
                            MaxWeight = 27,
                            MinAge = 6,
                            Name = "Pee Wee 2"
                        },
                        new
                        {
                            Id = 6,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 7,
                            MaxWeight = 30,
                            MinAge = 6,
                            Name = "Pee Wee 2"
                        },
                        new
                        {
                            Id = 7,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 7,
                            MaxWeight = 200,
                            MinAge = 6,
                            Name = "Pee Wee 2"
                        },
                        new
                        {
                            Id = 8,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 24,
                            MinAge = 8,
                            Name = "Junior 1"
                        },
                        new
                        {
                            Id = 9,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 27,
                            MinAge = 8,
                            Name = "Junior 1"
                        },
                        new
                        {
                            Id = 10,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 30,
                            MinAge = 8,
                            Name = "Junior 1"
                        },
                        new
                        {
                            Id = 11,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 34,
                            MinAge = 8,
                            Name = "Junior 1"
                        },
                        new
                        {
                            Id = 12,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 38,
                            MinAge = 8,
                            Name = "Junior 1"
                        },
                        new
                        {
                            Id = 13,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 42,
                            MinAge = 8,
                            Name = "Junior 1"
                        },
                        new
                        {
                            Id = 14,
                            Belt = 0,
                            FightTimeMinutes = 3,
                            MaxAge = 9,
                            MaxWeight = 200,
                            MinAge = 8,
                            Name = "Junior 1"
                        });
                });

            modelBuilder.Entity("ChampManage.API.Entities.Championship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.Property<int>("OrganizerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("RegistrationDeadline")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("RegistrationFee")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OrganizerId");

                    b.ToTable("Championships", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateTime = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Championship 1",
                            Location = "Location 1",
                            OrganizerId = 1,
                            RegistrationDeadline = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationFee = 50.00m,
                            Title = "Championship 1"
                        },
                        new
                        {
                            Id = 2,
                            DateTime = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Championship 2",
                            Location = "Location 2",
                            OrganizerId = 2,
                            RegistrationDeadline = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationFee = 40.00m,
                            Title = "Championship 2"
                        },
                        new
                        {
                            Id = 3,
                            DateTime = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Description of Championship 3",
                            Location = "Location 3",
                            OrganizerId = 3,
                            RegistrationDeadline = new DateTime(2023, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RegistrationFee = 60.00m,
                            Title = "Championship 3"
                        });
                });

            modelBuilder.Entity("ChampManage.API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Belt")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("BLOB");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("TeamName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("UserType")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Weight")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("ChampionshipUser", b =>
                {
                    b.HasOne("ChampManage.API.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("ParticipantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ChampManage.API.Entities.Championship", null)
                        .WithMany()
                        .HasForeignKey("RegisteredChampionshipsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChampManage.API.Entities.Category", b =>
                {
                    b.HasOne("ChampManage.API.Entities.Championship", null)
                        .WithMany("Categories")
                        .HasForeignKey("ChampionshipId");
                });

            modelBuilder.Entity("ChampManage.API.Entities.Championship", b =>
                {
                    b.HasOne("ChampManage.API.Entities.User", "Organizer")
                        .WithMany("CreatedChampionships")
                        .HasForeignKey("OrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("ChampManage.API.Entities.Championship", b =>
                {
                    b.Navigation("Categories");
                });

            modelBuilder.Entity("ChampManage.API.Entities.User", b =>
                {
                    b.Navigation("CreatedChampionships");
                });
#pragma warning restore 612, 618
        }
    }
}
